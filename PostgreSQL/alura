CREATE TABLE aluno(
	id SERIAL,
	nome VARCHAR(255),
	data_nascimento DATE,
	idade INTEGER,
	altura REAL,
	cpf CHAR(11),
	matriculado_em TIMESTAMP,
	hora_aula TIME,
	dinheiro NUMERIC(10,2),
	ativo BOOLEAN
);


INSERT INTO aluno 
	VALUES (1, 'Maria', '1909-06-19', 23, 1.75, '123456', '1930-07-01 13:01:05', 
		   '17:00:00', 100.13, False, 'Mari')


ALTER TABLE aluno ADD COLUMN observacao TEXT;
ALTER TABLE aluno DROP COLUMN descrição CASCADE;

SELECT * 
	FROM aluno
	WHERE nome = 'Maria';
	
DELETE 
	FROM aluno 
	WHERE nome = 'Maria';
	
SELECT nome AS "Nome do Aluno", 
		idade, 
		matriculado_em AS quando_se_matriculou
FROM aluno;

SELECT * FROM aluno;

INSERT INTO aluno (nome) VALUES ('Anna Almeida');
INSERT INTO aluno (nome) VALUES ('Alex');
INSERT INTO aluno (nome) VALUES ('João Pedro');
INSERT INTO aluno (nome) VALUES ('Pamela');

SELECT * 
	FROM aluno
	WHERE nome LIKE 'Pam_la';
	
SELECT * 
	FROM aluno 
	WHERE nome LIKE '% %'

SELECT * 
	FROM aluno
	WHERE cpf IS NULL
	
SELECT *
	FROM aluno
	WHERE cpf IS NOT NULL

SELECT * 
	FROM aluno
	WHERE idade BETWEEN 10 AND 23

DROP TABLE curso;
CREATE TABLE curso (
	id INTEGER PRIMARY KEY,
	nome VARCHAR(255)
);

INSERT INTO curso (id, nome) VALUES (1, 'HTML');
INSERT INTO curso (id, nome) VALUES (2, 'CSS');

DROP TABLE aluno;
CREATE TABLE aluno (
	id SERIAL PRIMARY KEY,
	nome VARCHAR (255)
);

INSERT INTO aluno (nome) VALUES ('Anna');
INSERT INTO aluno (nome) VALUES ('Alex');

DROP TABLE aluno_curso;
CREATE TABLE aluno_curso (
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY (aluno_id, curso_id),
	
	FOREIGN KEY (aluno_id)
		REFERENCES aluno (id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	
	FOREIGN KEY (curso_id)
		REFERENCES curso (id)
);

UPDATE aluno 
	SET id = 5 
	WHERE id = 2;

INSERT INTO aluno_curso VALUES (1, 1);
INSERT INTO aluno_curso VALUES (2, 1);
INSERT INTO aluno_curso VALUES (2, 2);
	
DELETE FROM aluno WHERE id = 1;
SELECT * FROM aluno_curso;

SELECT aluno.nome AS Aluno, curso.nome AS Curso
	FROM aluno
	JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
	JOIN curso       ON curso.id = aluno_curso.curso_id

INSERT INTO aluno VALUES (3, 'Nico');
INSERT INTO curso VALUES (3, 'Python');


SELECT aluno.nome AS Aluno, curso.nome AS Curso
	FROM aluno
	LEFT JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
	LEFT JOIN curso       ON curso.id = aluno_curso.curso_id

SELECT aluno.nome AS Aluno, curso.nome AS Curso
	FROM aluno
	RIGHT JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
	RIGHT JOIN curso       ON curso.id = aluno_curso.curso_id

SELECT aluno.nome AS Aluno, curso.nome AS Curso
	FROM aluno
	FULL JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
	FULL JOIN curso       ON curso.id = aluno_curso.curso_id
	
SELECT aluno.nome AS Aluno, curso.nome AS Curso
	FROM aluno
	CROSS JOIN curso
	
DELETE FROM aluno WHERE id = 1	


CREATE TABLE funcionarios(
    id SERIAL PRIMARY KEY,
    matricula VARCHAR(10),
    nome VARCHAR(255),
    sobrenome VARCHAR(255)
);

INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M001', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M002', 'Vinícius', 'Dias');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M003', 'Nico', 'Steppat');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M004', 'João', 'Roberto');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M005', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M006', 'Alberto', 'Martins');

SELECT * 
	FROM funcionarios
	ORDER BY nome DESC, matricula;

SELECT * 
	FROM funcionarios
	ORDER BY 3, 4 DESC;

SELECT *
	FROM funcionarios
	ORDER BY id
 LIMIT 5
OFFSET 3;

SELECT COUNT(id),
	   SUM(id),
	   MAX(id),
	   MIN(id),
	   ROUND(AVG(id),2)
	FROM funcionarios;
	
SELECT DISTINCT nome
	FROM funcionarios
	ORDER BY nome;
	
SELECT nome,
	sobrenome,
	COUNT(*)
FROM funcionarios
GROUP BY nome, sobrenome
ORDER BY nome;


SELECT curso.nome
	FROM curso 
	LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
	LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id
	--WHERE curso.nome = 'CSS'
GROUP BY 1
HAVING COUNT (aluno.id) > 0;

SELECT (nome), 
		COUNT(id)
	FROM funcionarios
GROUP BY nome
HAVING COUNT(id) > 1;
